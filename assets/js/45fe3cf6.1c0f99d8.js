"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[6350],{3905:function(e,t,n){n.d(t,{Zo:function(){return l},kt:function(){return d}});var r=n(7294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},i=Object.keys(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var u=r.createContext({}),c=function(e){var t=r.useContext(u),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},l=function(e){var t=c(e.components);return r.createElement(u.Provider,{value:t},e.children)},p={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},m=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,i=e.originalType,u=e.parentName,l=s(e,["components","mdxType","originalType","parentName"]),m=c(n),d=a,f=m["".concat(u,".").concat(d)]||m[d]||p[d]||i;return n?r.createElement(f,o(o({ref:t},l),{},{components:n})):r.createElement(f,o({ref:t},l))}));function d(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var i=n.length,o=new Array(i);o[0]=m;var s={};for(var u in t)hasOwnProperty.call(t,u)&&(s[u]=t[u]);s.originalType=e,s.mdxType="string"==typeof e?e:a,o[1]=s;for(var c=2;c<i;c++)o[c]=n[c];return r.createElement.apply(null,o)}return r.createElement.apply(null,n)}m.displayName="MDXCreateElement"},3566:function(e,t,n){n.r(t),n.d(t,{frontMatter:function(){return s},contentTitle:function(){return u},metadata:function(){return c},toc:function(){return l},default:function(){return m}});var r=n(7462),a=n(3366),i=(n(7294),n(3905)),o=["components"],s={},u="Lab: Username enumeration via response timing",c={unversionedId:"PortSwigger/Authentication/Lab 03",id:"PortSwigger/Authentication/Lab 03",isDocsHomePage:!1,title:"Lab: Username enumeration via response timing",description:"Task",source:"@site/docs/PortSwigger/Authentication/Lab 03.md",sourceDirName:"PortSwigger/Authentication",slug:"/PortSwigger/Authentication/Lab 03",permalink:"/Writeups/docs/PortSwigger/Authentication/Lab 03",editUrl:"https://github.com/datthinh1801/Writupes/tree/main/website/docs/PortSwigger/Authentication/Lab 03.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Lab: Username enumeration via subtly different responses",permalink:"/Writeups/docs/PortSwigger/Authentication/Lab 02"},next:{title:"Lab: Broken brute-force protection, IP block",permalink:"/Writeups/docs/PortSwigger/Authentication/Lab 04"}},l=[{value:"Task",id:"task",children:[]},{value:"Solution",id:"solution",children:[]}],p={toc:l};function m(e){var t=e.components,n=(0,a.Z)(e,o);return(0,i.kt)("wrapper",(0,r.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"lab-username-enumeration-via-response-timing"},"Lab: Username enumeration via response timing"),(0,i.kt)("h2",{id:"task"},"Task"),(0,i.kt)("p",null,"This lab is vulnerable to username enumeration using its response times. To solve the lab, enumerate a valid username, brute-force this user's password, then access their account page."),(0,i.kt)("p",null,"Your credentials: ",(0,i.kt)("inlineCode",{parentName:"p"},"wiener:peter")),(0,i.kt)("h2",{id:"solution"},"Solution"),(0,i.kt)("p",null,"First, in order not to be blocked, we need to add an additional header ",(0,i.kt)("inlineCode",{parentName:"p"},"X-Forwarded-For")," with a different value for each request.  "),(0,i.kt)("p",null,"Second, while brute-forcing the ",(0,i.kt)("inlineCode",{parentName:"p"},"username"),", if a valid ",(0,i.kt)("inlineCode",{parentName:"p"},"username")," is encountered, the server will check the long ",(0,i.kt)("inlineCode",{parentName:"p"},"password"),", which in turn causes a delay.",(0,i.kt)("br",{parentName:"p"}),"\n","On Burp Suite Pro, I ran an attack and see that the ",(0,i.kt)("inlineCode",{parentName:"p"},"mysql")," username had the longest response time, which is a signal of a valid ",(0,i.kt)("inlineCode",{parentName:"p"},"username"),".  "),(0,i.kt)("p",null,(0,i.kt)("img",{parentName:"p",src:"https://user-images.githubusercontent.com/44528004/130248381-febbd5ac-3147-4a25-a1c6-2ecf45c26060.png",alt:"image"})),(0,i.kt)("p",null,"Then, brute-forcing the ",(0,i.kt)("inlineCode",{parentName:"p"},"password")," of the ",(0,i.kt)("inlineCode",{parentName:"p"},"mysql")," user and the response with ",(0,i.kt)("inlineCode",{parentName:"p"},"status code == 302")," is the correct password.  "),(0,i.kt)("p",null,(0,i.kt)("img",{parentName:"p",src:"https://user-images.githubusercontent.com/44528004/130248127-64eeda06-bbe6-4d19-8bc9-1552eed3fbdf.png",alt:"image"}),"  "),(0,i.kt)("p",null,"With these information, the valid credential is ",(0,i.kt)("inlineCode",{parentName:"p"},"mysql:777777"),"  "),(0,i.kt)("p",null,(0,i.kt)("img",{parentName:"p",src:"https://user-images.githubusercontent.com/44528004/130248592-af757af9-1f3b-4e7a-870d-9408b8920324.png",alt:"image"})),(0,i.kt)("blockquote",null,(0,i.kt)("p",{parentName:"blockquote"},"Solved!")))}m.isMDXComponent=!0}}]);