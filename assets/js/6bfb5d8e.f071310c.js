"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[354],{3905:function(e,t,r){r.d(t,{Zo:function(){return c},kt:function(){return f}});var n=r(7294);function a(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function o(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function i(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?o(Object(r),!0).forEach((function(t){a(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):o(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function l(e,t){if(null==e)return{};var r,n,a=function(e,t){if(null==e)return{};var r,n,a={},o=Object.keys(e);for(n=0;n<o.length;n++)r=o[n],t.indexOf(r)>=0||(a[r]=e[r]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(n=0;n<o.length;n++)r=o[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(a[r]=e[r])}return a}var s=n.createContext({}),p=function(e){var t=n.useContext(s),r=t;return e&&(r="function"==typeof e?e(t):i(i({},t),e)),r},c=function(e){var t=p(e.components);return n.createElement(s.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},d=n.forwardRef((function(e,t){var r=e.components,a=e.mdxType,o=e.originalType,s=e.parentName,c=l(e,["components","mdxType","originalType","parentName"]),d=p(r),f=a,b=d["".concat(s,".").concat(f)]||d[f]||u[f]||o;return r?n.createElement(b,i(i({ref:t},c),{},{components:r})):n.createElement(b,i({ref:t},c))}));function f(e,t){var r=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var o=r.length,i=new Array(o);i[0]=d;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l.mdxType="string"==typeof e?e:a,i[1]=l;for(var p=2;p<o;p++)i[p]=r[p];return n.createElement.apply(null,i)}return n.createElement.apply(null,r)}d.displayName="MDXCreateElement"},8594:function(e,t,r){r.r(t),r.d(t,{frontMatter:function(){return l},contentTitle:function(){return s},metadata:function(){return p},toc:function(){return c},default:function(){return d}});var n=r(7462),a=r(3366),o=(r(7294),r(3905)),i=["components"],l={},s="Lab: File path traversal, traversal sequences stripped with superfluous URL-decode",p={unversionedId:"PortSwigger/Directory Traversal/Lab 04",id:"PortSwigger/Directory Traversal/Lab 04",isDocsHomePage:!1,title:"Lab: File path traversal, traversal sequences stripped with superfluous URL-decode",description:"Task",source:"@site/docs/PortSwigger/Directory Traversal/Lab 04.md",sourceDirName:"PortSwigger/Directory Traversal",slug:"/PortSwigger/Directory Traversal/Lab 04",permalink:"/Writeups/docs/PortSwigger/Directory Traversal/Lab 04",editUrl:"https://github.com/datthinh1801/Writupes/tree/main/website/docs/PortSwigger/Directory Traversal/Lab 04.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Lab: File path traversal, traversal sequences stripped non-recursively",permalink:"/Writeups/docs/PortSwigger/Directory Traversal/Lab 03"},next:{title:"Lab: File path traversal, validation of start of path",permalink:"/Writeups/docs/PortSwigger/Directory Traversal/Lab 05"}},c=[{value:"Task",id:"task",children:[]},{value:"Solution",id:"solution",children:[]}],u={toc:c};function d(e){var t=e.components,r=(0,a.Z)(e,i);return(0,o.kt)("wrapper",(0,n.Z)({},u,r,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"lab-file-path-traversal-traversal-sequences-stripped-with-superfluous-url-decode"},"Lab: File path traversal, traversal sequences stripped with superfluous URL-decode"),(0,o.kt)("h2",{id:"task"},"Task"),(0,o.kt)("p",null,"This lab contains a file path traversal vulnerability in the display of product images."),(0,o.kt)("p",null,"The application blocks input containing path traversal sequences. It then performs a URL-decode of the input before using it."),(0,o.kt)("p",null,"To solve the lab, retrieve the contents of the ",(0,o.kt)("inlineCode",{parentName:"p"},"/etc/passwd")," file."),(0,o.kt)("h2",{id:"solution"},"Solution"),(0,o.kt)("p",null,"In this lab, the application blocks traversal sequences like ",(0,o.kt)("inlineCode",{parentName:"p"},"../"),"; furthermore, it performs a URL-decode before using the ",(0,o.kt)("inlineCode",{parentName:"p"},"filename"),".\nFor this reason, we need to URL-encode the ",(0,o.kt)("inlineCode",{parentName:"p"},"../")," in to ",(0,o.kt)("inlineCode",{parentName:"p"},"..%252f"),"."),(0,o.kt)("blockquote",null,(0,o.kt)("p",{parentName:"blockquote"},"The proof is that URL-decoding ",(0,o.kt)("inlineCode",{parentName:"p"},"%25")," results in ",(0,o.kt)("inlineCode",{parentName:"p"},"%"),". Thus, ",(0,o.kt)("inlineCode",{parentName:"p"},"%252f")," becomes ",(0,o.kt)("inlineCode",{parentName:"p"},"%2f")," which is URL-decoded into ",(0,o.kt)("inlineCode",{parentName:"p"},"/"),".  ")),(0,o.kt)("p",null,"With this encoding, our payload is:  "),(0,o.kt)("p",null,(0,o.kt)("img",{parentName:"p",src:"https://user-images.githubusercontent.com/44528004/130416615-c5df2eb8-51dd-4505-bf8b-df739e00bb7b.png",alt:"image"})),(0,o.kt)("blockquote",null,(0,o.kt)("p",{parentName:"blockquote"},"Solved!")))}d.isMDXComponent=!0}}]);